@startuml
skinparam backgroundColor #FFFFFC
title 供应商账户更新
actor 运营 #red
actor crane #red

运营 -> 烽火台前端 : 配置画像
烽火台前端 -> 骑手商城后端 : 配置画像
note right
入参:
1、画像名称
2、画像id（更新是id>0）
3、类目属性
4、商家属性
5、销售属性（上架天数、商品折扣、商品价格、销量、销售额、销售渠道）
end note
骑手商城后端 -> 骑手商城后端 : 校验是否至少有一个配置
骑手商城后端 -> 骑手商城后端 : 同配置是否配置完整
骑手商城后端 -> 骑手商城后端 : 获取当前时间，并更新画像的刷新时间为：当前时间-》未来一个月
骑手商城后端 -> DB : 更新DB数据
骑手商城后端 -> 烽火台前端 : 返回更新结果

==其他更新时机==
crane -> 骑手商城后端 : 定时更新营销位上架
骑手商城后端 -> 骑手商城后端 : 判断待上架的营销位是否有绑定画像
骑手商城后端 -> DB : 更新对应画像的刷新时间
note right : 时间会基于营销位的时间与DB中的时间取最宽的时间
====

crane -> 骑手商城后端 : 定时刷新画像
note right : 暂定10分钟刷一次
骑手商城后端 -> DB : 获取DB画像数据
note right : 刷新数据为当前时间为可刷新的时间内的画像
骑手商城后端 -> 骑手商城后端 : 获取画像配置条件准备开始整合数据

par 整合画像数据

par 供应商部分 (有入驻时间时才请求，都没有时则不请求)
    骑手商城后端 -> 服务市场 : 获取满足画像条件的供应商
    note right
    入参:
    1、供应商创建账号时间
    end note
    服务市场 --> 骑手商城后端: 返回供应商id列表
end

par 折扣部分 (有商品折扣时才请求，都没有时则不请求)
    骑手商城后端 -> 服务市场 : 获取所有生效中的折扣活动
    骑手商城后端 -> 骑手商城后端 : 过滤折扣Y折不满足条件的折扣活动
    loop 循环折扣
        骑手商城后端 -> 服务市场 : 获取折扣对应的sku信息
        loop 循环sku列表
            骑手商城后端 -> 缓存 : 获取对应sku的缓存中剩余库存
        end
        骑手商城后端 -> 骑手商城后端 : 根据spu 维度聚合剩余活动库存
        骑手商城后端 -> 骑手商城后端 : 判断spu 剩余活动库存是否满足配置条件,不满足的过滤
    end
    骑手商城后端 --> 骑手商城后端: 返回满足配置的spuid列表
end


par 商品中心部分(有供应商|上架天数|价格|销售渠道|类目配置时才请求商品中心，都没有时则不请求)
    骑手商城后端 -> 商品中心 : 获取满足画像条件的商品
    note right
    入参:
    1、二级后台类目id列表（无时空列表）
    2、商品上架时间 （无时时间小于等于0）
    3、商品价格（sku价格大于等于X，且小于等于Y的商品都可）（无时价格小于等于0）
    4、销售渠道id列表（无时空列表）
    5、供应商id列表（无时空列表）
    end note
    商品中心 --> 骑手商城后端 : 返回对应商品
    note right
    过滤逻辑：
    1、多条件同时匹配
    2、需要是线上商品
    结果返回：
    1、门店id+商品id
    end note
end



par 数据组部分（有销售额与销售量配置时才请求数据组）
    骑手商城后端 -> 数据组 : 获取满足画像条件的商品(数据组可能是底表或者接口)
    note right
    核心入参：
    1、销售量：时间，销量范围
    2、销售额：时间，销售额范围
    end note
    数据组 -> 骑手商城后端 : 返回对应商品
    note right
    过滤逻辑：
    1、多条件同时匹配
    结果返回：
    1、门店id+商品id
    end note
end

骑手商城后端 -> 骑手商城后端 : 整体折扣+商品+数据组部分的商品数据
note right : 通过有配置条件的就会使用对应部分返回的商品列表就行merge，找出都匹配的商品数据

end
@enduml