@startuml
skinparam backgroundColor #FFFFFC
title 优惠劵弹窗
actor 用户 #red


用户 -> 购物端APP : 进入APP
购物端APP -> 骑手商城后端 : 获取待弹窗数据
note right : 整个生命周期仅可弹窗1次
骑手商城后端 -> 骑手商城后端 : 是否需要降级、降级则直接不弹窗返回

骑手商城后端 -> 骑手商城后端 : 获取用户渠道
骑手商城后端 -> 缓存 : 获取活动配置需要弹窗的活动缓存队列
骑手商城后端 -> 缓存 : 获取当前用户已经弹窗过的缓存队列

骑手商城后端 -> 骑手商城后端:计算活动缓存队列可以弹窗的活动
note right
计算逻辑：
1、符合渠道匹配的
2、活动失效时间小于当前时间
3、用户主动领取的所有数据
4、系统下发形式需要匹配当前用户是否有劵配置
end note

骑手商城后端 -> 骑手商城后端:结合已弹窗的缓存队列计算待弹窗数据
note right
计算逻辑：
1、可弹窗的活动缓存队列和已弹窗的缓存数据队列的差值为待弹窗数据
end note
骑手商城后端 -> 劵平台 : 通过用户与优惠劵ids批量查询优惠劵
note right
入参:
1、优惠劵ids
2、用户信息
end note
劵平台 -> 骑手商城后端 : 返回优惠劵信息
note right
结果vo对象:
1、优惠劵id
2、劵的状态(未开始、可领取、已领取、已抢光、已领取未到使用时间、已过期、已使用)
3、劵的满减信息
4、劵的领取时间范围
5、劵的可使用时间范围
6、优惠劵类型（平台、品类、指定商品、店铺）
7、优惠劵类型对应的配置内(类目id，商品id，skuid)
end note

骑手商城后端 -> 骑手商城后端 : 组装优惠劵数据，并过滤无效的优惠劵
骑手商城后端 -> 购物端APP : 批量返回待弹窗的数据

骑手商城后端 --> 骑手商城后端 : 异步增加本次的弹窗数据到已弹窗的缓存队列中
骑手商城后端 --> 骑手商城后端 : 判断活动缓存队列是否有已失效的数据，将已失效的缓存数据删除

@enduml