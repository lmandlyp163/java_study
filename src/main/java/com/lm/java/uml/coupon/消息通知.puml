@startuml
skinparam backgroundColor #FFFFFC
title 状态变更&通知

crane -> 骑手商城服务端 : 1分钟调用一次
note right : 待生效状态更新未已开始&通知用户
骑手商城服务端 -> DB : 获取待生效的优惠劵活动
note right
查询条件：
1、状态待开始
2、当前时间>活动开始时间
end note
DB -> 骑手商城服务端:返回待开始的活动


alt 系统发劵（若配置系统下发形式）（并且状态为未下发）
骑手商城服务端 -> 劵平台 : 系统发劵
note right : 遍历配置的用户系统发劵
骑手商城服务端 -> DB : 更新劵发送结果为已发送
DB -> 骑手商城服务端 : 返回更新结果
end


alt 通知（通知状态为未通知）
骑手商城服务端 -> PUSH中心:发送push
note right
push内容:
    系统下发:
        —消息标题：优惠券已到账，请注意查收
        -副标题 ：满xx减xx，满xx减xx，满xx减xx（读取下发配置的劵信息，按配置顺序至多读取前3个）
        —发送类型：通知中心+PUSH；
        —跳转方式：点击消息后，直接跳转到商城的“我的优惠券”页面；
    主动领取:
        —消息标题：优惠券待领取，手慢无；
        -副标题 ：满xx减xx，满xx减xx，满xx减xx（读取整体配置的劵信息，按配置顺序至多读取前3个）
        —发送类型：通知中心+PUSH；
        —跳转方式：跳转到优惠券领取页；
end note

骑手商城服务端 -> 缓存:记录用户首页弹窗的缓存队列
note right
1、失效时间
    主动领取方式：活动的结束时间为失效时间
    系统下发方式：劵的结束时间为失效时间
2、用户待弹窗的记录多条时是否需要只弹最新的一条，由客户端记录用户上次请求的时间、做个时间段的限制请求
end note
缓存 -> 缓存 : 用户弹窗后返回失效时间最短的一条，并移出缓存队列
骑手商城服务端 -> DB : 更新该活动通知状态为已通知
DB -> 骑手商城服务端 : 返回更新结果
end

alt 更新状态
骑手商城服务端 -> DB : 更新活动状态为进行中
DB -> 骑手商城服务端 : 返回更新结果
note right : 不需要通知劵平台更新状态、劵平台只关心有效无效
end


crane -> 骑手商城服务端 : 1分钟调用一次
note right : 已开始状态更新为已结束状态
骑手商城服务端 -> DB : 获取已开始的优惠劵活动
note right
查询条件：
1、状态已开始
2、当前时间>活动结束时间
end note
骑手商城服务端 -> DB : 更新活动状态为已结束
DB -> 骑手商城服务端 : 返回更新结果
note right : 不需要通知劵平台更新状态、劵平台只关心有效无效



@enduml